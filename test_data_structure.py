#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar estrutura de dados retornados pela an√°lise EDA b√°sica
"""
import asyncio
import sys
import os
import json

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.data_analyzer import DataAnalyzer
import pandas as pd

async def test_basic_eda_data_structure():
    """Verificar exatamente que dados s√£o retornados na an√°lise EDA b√°sica"""
    
    print("üîç ANALISANDO ESTRUTURA DE DADOS RETORNADOS - AN√ÅLISE EDA B√ÅSICA")
    print("=" * 80)
    
    # Criar dados de exemplo
    df = pd.DataFrame({
        'categoria': ['A', 'B', 'A', 'C', 'B', 'A', 'C', 'B', 'A', 'A'],
        'valor_numerico': [10, 20, 15, 30, 25, 12, 35, 22, 18, 16],
        'cidade': ['S√£o Paulo', 'Rio de Janeiro', 'S√£o Paulo', 'Belo Horizonte', 
                   'S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'S√£o Paulo', 
                   'Rio de Janeiro', 'S√£o Paulo'],
        'score': [85.5, 92.1, 78.3, 95.7, 88.2, 82.9, 90.4, 87.1, 89.3, 84.6]
    })
    
    print(f"üìä Dataset de teste criado: {len(df)} linhas √ó {len(df.columns)} colunas")
    print(f"Colunas: {list(df.columns)}")
    print()
    
    # Instanciar analisador
    analyzer = DataAnalyzer()
    
    # Executar an√°lise b√°sica
    print("üöÄ Executando an√°lise EDA b√°sica...")
    result = await analyzer._basic_eda_analysis(df, 'test_data.csv')
    
    print("\n" + "=" * 80)
    print("üìã ESTRUTURA COMPLETA DOS DADOS RETORNADOS")
    print("=" * 80)
    
    # 1. Chaves principais
    print("\n1Ô∏è‚É£ CHAVES PRINCIPAIS:")
    for key in result.keys():
        print(f"   ‚Ä¢ {key}")
    
    # 2. Dataset Info
    print("\n2Ô∏è‚É£ DATASET INFO:")
    dataset_info = result.get('dataset_info', {})
    for key, value in dataset_info.items():
        print(f"   {key}: {value}")
    
    # 3. An√°lise das colunas categ√≥ricas
    print("\n3Ô∏è‚É£ DADOS CATEG√ìRICOS (categoria):")
    column_stats = result.get('column_statistics', [])
    categoria_col = next((col for col in column_stats if col['name'] == 'categoria'), None)
    
    if categoria_col:
        print(f"   Nome: {categoria_col['name']}")
        print(f"   Tipo: {categoria_col['dtype']}")
        print(f"   Valores √∫nicos: {categoria_col['unique_count']}")
        print(f"   Mais frequente: {categoria_col.get('most_frequent')}")
        print(f"   Frequ√™ncia: {categoria_col.get('frequency')}")
        print(f"   Top values: {categoria_col.get('top_values', {})}")
        print(f"   Cardinalidade: {categoria_col.get('cardinality')}")
    
    # 4. An√°lise das colunas num√©ricas
    print("\n4Ô∏è‚É£ DADOS NUM√âRICOS (valor_numerico):")
    valor_col = next((col for col in column_stats if col['name'] == 'valor_numerico'), None)
    
    if valor_col:
        print(f"   Nome: {valor_col['name']}")
        print(f"   Tipo: {valor_col['dtype']}")
        print(f"   M√©dia: {valor_col.get('mean')}")
        print(f"   Mediana: {valor_col.get('median')}")
        print(f"   Desvio Padr√£o: {valor_col.get('std')}")
        print(f"   M√≠nimo: {valor_col.get('min')}")
        print(f"   M√°ximo: {valor_col.get('max')}")
        print(f"   Q25: {valor_col.get('q25')}")
        print(f"   Q75: {valor_col.get('q75')}")
        print(f"   Outliers: {valor_col.get('outlier_count', 0)}")
    
    # 5. An√°lise espec√≠fica para gr√°ficos de barras
    print("\n5Ô∏è‚É£ DADOS DISPON√çVEIS PARA GR√ÅFICOS DE BARRAS:")
    
    print("\n   üéØ CATEGORIA (para gr√°fico de barras):")
    if categoria_col and 'top_values' in categoria_col:
        top_values = categoria_col['top_values']
        print(f"      Top values dispon√≠veis: {len(top_values)} itens")
        for valor, frequencia in top_values.items():
            print(f"      ‚Ä¢ {valor}: {frequencia} ocorr√™ncias")
    
    print("\n   üéØ CIDADE (para gr√°fico de barras):")
    cidade_col = next((col for col in column_stats if col['name'] == 'cidade'), None)
    if cidade_col and 'top_values' in cidade_col:
        top_values = cidade_col['top_values']
        print(f"      Top values dispon√≠veis: {len(top_values)} itens")
        for valor, frequencia in top_values.items():
            print(f"      ‚Ä¢ {valor}: {frequencia} ocorr√™ncias")
    
    # 6. Verificar se dados brutos est√£o dispon√≠veis
    print("\n6Ô∏è‚É£ DISPONIBILIDADE DE DADOS BRUTOS:")
    print("   ‚ùå Dados brutos das colunas N√ÉO s√£o retornados")
    print("   ‚úÖ Apenas estat√≠sticas agregadas e top_values est√£o dispon√≠veis")
    print("   ‚úÖ Para gr√°ficos de barras: usar 'top_values' de colunas categ√≥ricas")
    print("   ‚úÖ Para histogramas: usar estat√≠sticas (min, max, mean, std) para simular distribui√ß√£o")
    
    # 7. Correla√ß√µes
    print("\n7Ô∏è‚É£ DADOS DE CORRELA√á√ÉO:")
    correlations = result.get('correlations', {})
    if correlations:
        print(f"   Correla√ß√µes dispon√≠veis: {len(correlations)} pares")
        print(f"   Estrutura: {list(correlations.keys())[:3]}...")
    
    print("\n" + "=" * 80)
    print("üìä CONCLUS√ÉO SOBRE GR√ÅFICOS DE BARRAS")
    print("=" * 80)
    print("‚úÖ SIM, √© poss√≠vel fazer gr√°ficos de barras!")
    print("üìã Dados dispon√≠veis:")
    print("   ‚Ä¢ top_values: dicion√°rio com valor ‚Üí frequ√™ncia")
    print("   ‚Ä¢ most_frequent: valor mais frequente")
    print("   ‚Ä¢ frequency: frequ√™ncia do valor mais frequente")
    print("   ‚Ä¢ cardinality: n√∫mero total de categorias √∫nicas")
    print()
    print("‚ùå LIMITA√á√ÉO: Dados brutos das colunas N√ÉO s√£o retornados")
    print("   ‚Ä¢ Apenas estat√≠sticas agregadas")
    print("   ‚Ä¢ Para datasets grandes, isso √© intencional (economia de mem√≥ria)")
    print("   ‚Ä¢ Para gr√°ficos, usar top_values √© suficiente e eficiente")

if __name__ == "__main__":
    asyncio.run(test_basic_eda_data_structure())